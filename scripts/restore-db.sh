#!/bin/sh

# Script de restauration PostgreSQL

set -e

if [ "$#" -ne 1 ]; then
    echo "‚ùå Usage: $0 <backup_file.sql.gz>"
    echo "üìÅ Sauvegardes disponibles:"
    ls -la /backups/flirit_backup_*.sql.gz 2>/dev/null || echo "Aucune sauvegarde trouv√©e"
    exit 1
fi

BACKUP_FILE="$1"
BACKUP_PATH="/backups/$BACKUP_FILE"

# Variables d'environnement
POSTGRES_HOST=${POSTGRES_HOST:-postgres}
POSTGRES_DB=${POSTGRES_DB:-postgres}
POSTGRES_USER=${POSTGRES_USER:-postgres}

echo "üîÑ D√©marrage de la restauration depuis: $BACKUP_FILE"

# V√©rifier que le fichier existe
if [ ! -f "$BACKUP_PATH" ]; then
    echo "‚ùå Fichier de sauvegarde non trouv√©: $BACKUP_PATH"
    exit 1
fi

# Attendre que PostgreSQL soit pr√™t
echo "‚è≥ V√©rification de la disponibilit√© de PostgreSQL..."
until pg_isready -h "$POSTGRES_HOST" -U "$POSTGRES_USER" > /dev/null 2>&1; do
  echo "PostgreSQL n'est pas encore pr√™t, attente..."
  sleep 5
done

echo "‚úÖ PostgreSQL est pr√™t"

# D√©compresser si n√©cessaire
TEMP_FILE="/tmp/restore_temp.sql"
if [[ "$BACKUP_FILE" == *.gz ]]; then
    echo "üóúÔ∏è  D√©compression de la sauvegarde..."
    gunzip -c "$BACKUP_PATH" > "$TEMP_FILE"
    RESTORE_FILE="$TEMP_FILE"
else
    RESTORE_FILE="$BACKUP_PATH"
fi

# Demander confirmation
echo "‚ö†Ô∏è  ATTENTION: Cette op√©ration va remplacer toutes les donn√©es de la base '$POSTGRES_DB'"
echo "üîÑ Voulez-vous continuer? (y/N)"
read -r response
if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
    echo "‚ùå Restauration annul√©e"
    rm -f "$TEMP_FILE"
    exit 1
fi

# Effectuer la restauration
echo "üîÑ Restauration en cours..."
PGPASSWORD="$POSTGRES_PASSWORD" pg_restore \
  -h "$POSTGRES_HOST" \
  -U "$POSTGRES_USER" \
  -d "$POSTGRES_DB" \
  --verbose \
  --clean \
  --if-exists \
  "$RESTORE_FILE"

if [ $? -eq 0 ]; then
  echo "‚úÖ Restauration termin√©e avec succ√®s"
else
  echo "‚ùå Erreur lors de la restauration"
  rm -f "$TEMP_FILE"
  exit 1
fi

# Nettoyage
rm -f "$TEMP_FILE"

echo "‚úÖ Restauration compl√®te - $(date)"